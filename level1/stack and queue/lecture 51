239. Sliding Window Maximum

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        ArrayDeque<Integer> dq = new ArrayDeque<>();
        int[] res = new int[nums.length-k+1];
        int idx = 0;
       
        for(int i = 0;i< nums.length;i++){
            
            while(dq.size()>0 && nums[dq.peekLast()] <=nums[i]){
                dq.removeLast();
            }
            dq.addLast(i);
            if(i >=k-1){
                res[idx] =nums[dq.peekFirst()];
                idx++;
                if(i-k+1 == dq.peekFirst()){
                    dq.removeFirst();
                }
            }
        }
        return res;
    }
}



155. Min Stack

class MinStack {
    Stack<Long> data;
    Long min;

    public MinStack() {
        data = new Stack<>();
        min = Long.MAX_VALUE;
    }
    
    public void push(int val) {
       long val1 = val;
	  if(val1<min){
            data.push(val1+val1-min);
            min = val1;
         }
       else{
            data.push(val1);
        }
    }
    
    public void pop() {
        if(data.peek()<min){
            long temp = min;
            min = min+min-data.pop();
        }else{
            data.pop();
        }
        
    }
    
    public int top() {
        if(data.peek()<min){
            return min.intValue();
        }else{
          return  data.peek().intValue();
        }
        
    }
    
    public int getMin() {
       return min.intValue();
    }
}



