  /////Linked List To Stack Adapter
  
  
  
  public static class LLToStackAdapter {
    LinkedList<Integer> list;

    public LLToStackAdapter() {
      list = new LinkedList<>();
      
    }


    int size() {
      // write your code here
      return list.size();
    }

    void push(int val) {
      // write your code here
      list.addFirst(val);
      
      
    }

    int pop() {
      // write your code here
      if(size()==0){
          System.out.println("Stack underflow");
          return -1;
      }
      return list.removeFirst();
      
    }

    int top() {
      // write your code here
      if(size()==0){
          System.out.println("Stack underflow");
          return -1;
      }
      return list.getFirst();
    }



/////Linked List To Queue Adapter

    public LLToQueueAdapter() {
        list = new LinkedList<>();
      }
  
      int size() {
        // write your code here
        return list.size();
      }
  
      void add(int val) {
        // write your code here
        list.addLast(val);
      }
  
      int remove() {
        // write your code here
        return list.removeFirst();
      }
  
      int peek() {
        // write your code here
        return list.getFirst();
      }



///////////Two Stacks In An Array


   
  public static class TwoStack {
    int[] data;
    int tos1;
    int tos2;

    public TwoStack(int cap) {
        // write your code here
        data = new int[cap];
        tos1=-1;
        tos2=data.length;
    }

    int size1() {
      // write your code here
      return tos1+1;
    }

    int size2() {
      // write your code here
      return  data.length-tos2;
    }

    void push1(int val) {
      // write your code here
      if(tos1+1 >=tos2){
          System.out.println("Stack overflow");
          return;
      }
      tos1=tos1+1;
      data[tos1]=val;
      //size1++;
    }

    void push2(int val) {
      // write your code here
          if(tos1>=tos2-1){
          System.out.println("Stack overflow");
          return ;
      }
      tos2=tos2-1;
     data[tos2]=val;
    // size2++;
      
    }

    int pop1() {
      // write your code here
      if(tos1==-1){
          System.out.println("Stack underflow");
          return -1;
          
      }
     // size1--;
      return data[tos1--];
     
    }

    int pop2() {
      // write your code here
      if(tos2==data.length){
          System.out.println("Stack undrflow");
          return -1;
      }
     /// size2--;
      return data[tos2++];
    }

    int top1() {
      // write your code here
   if(tos1==-1){
          System.out.println("Stack underflow");
          return -1;
          
      }
      return data[tos1];
      
    }

    int top2() {
      // write your code here
         if(tos2==data.length){
          System.out.println("Stack undrflow");
          return -1;
      }
      return data[tos2];
    }