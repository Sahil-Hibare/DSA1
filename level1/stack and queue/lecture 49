//////Next Greater Element To The Right

public static int[] solve(int[] arr){
   // solve
   Stack<Integer> stk=new Stack<>();
   int[] res=new int[arr.length];
   for(int i=0;i<arr.length;i++){
       
       int temp=arr[i];
       ///pop elements smaller than us
       while( stk.size()>0 &&temp>arr[stk.peek()] ){
           res[stk.peek()]=temp;
           stk.pop();
       }
       
       stk.push(i);
   }
   while(stk.size()!=0){
       res[stk.pop()]=-1;
   }
   return res;
 }


 //////approach 2
  public static int[] solve(int[] arr){
   // solve
   Stack<Integer> stk=new Stack<>();
   int[] res=new int[arr.length];
   for(int i=arr.length-1;i>=0;i--){
       
       int temp=arr[i];
       ///pop elements smaller than us
       while( stk.size()>0 &&temp>=arr[stk.peek()] ){
           stk.pop();
       }
       if(stk.size()==0){
           res[i]=-1;
       }else{
           res[i]=arr[stk.peek()];
       }
       
       stk.push(i);
   }
 
   return res;
 }





//////84. Largest Rectangle in Histogram
class Solution {
    public int largestRectangleArea(int[] heights) {
        int[] nl=nsl(heights);
        int[] nr=nsr(heights);
        int maxarea=Integer.MIN_VALUE;
        for(int i=0;i<heights.length;i++){
           
            int area=(nr[i]-nl[i]-1)*heights[i];
            maxarea=Math.max(maxarea,area);
        }
       return maxarea; 
    }
    
    
    public int[] nsl(int[] arr){
        int[] res=new int[arr.length];
        Stack<Integer> stk=new Stack<>();
        for(int i=0;i<arr.length;i++){
            int curr=arr[i];
            while(stk.size()>0 && curr<=arr[stk.peek()]){
                stk.pop();
            }
            if(stk.isEmpty()){
                res[i]=-1;
            }else{
            res[i]=stk.peek();
            }
            stk.push(i);
           
        }
         return res;
    }
    
    public int[] nsr(int[] arr){
               int[] res=new int[arr.length];
        Stack<Integer> stk=new Stack<>();
        for(int i=arr.length-1;i>=0;i--){
            int curr=arr[i];
            while(stk.size()>0 && curr<=arr[stk.peek()]){
                stk.pop();
            }
            if(stk.isEmpty()){
                res[i]=arr.length;
            }else{
            res[i]=stk.peek();
            }
            stk.push(i);
            
        }
        return res;
    }
}
