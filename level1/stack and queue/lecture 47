

//////Queue To Stack Adapter - Push Efficient


public static class QueueToStackAdapter {
    Queue<Integer> mainQ;
    Queue<Integer> helperQ;

    public QueueToStackAdapter() {
      mainQ = new ArrayDeque<>();
      helperQ = new ArrayDeque<>();
    }

    int size() {
      // write your code here
      return mainQ.size();
    }

    void push(int val) {
      // write your code here
      mainQ.add(val);
    }

    int pop() {
      // write your code here
      if(size()==0){
          System.out.println("Stack underflow");
          return -1;
      }
      int count=size()-1;
      for(int i=1;i<=count;i++){
          int temp=mainQ.remove();
          mainQ.add(temp);
         
      }
      return mainQ.remove();
    }

    int top() {
      // write your code here
       if(size()==0){
          System.out.println("Stack underflow");
          return -1;
      }
        int count=size();
        int temp=-1;
      for(int i=1;i<=count;i++){
           temp=mainQ.remove();
          mainQ.add(temp);
      }
      return temp;
    }



///Queue To Stack Adapter - Pop Efficient

public static class QueueToStackAdapter {
    Queue<Integer> mainQ;
    Queue<Integer> helperQ;

    public QueueToStackAdapter() {
      mainQ = new ArrayDeque<>();
      helperQ = new ArrayDeque<>();
    }

    int size() {
      // write your code here
      return mainQ.size();
    }

    void push(int val) {
      // write your code here
      
      while(size()!=0){
         int temp= mainQ.remove();
         helperQ.add(temp);
      }
      mainQ.add(val);
      while(helperQ.size()!=0){
          mainQ.add(helperQ.remove());
      }
    }

    int pop() {
      // write your code here
      if(size()==0){
          System.out.println("Stack underflow");
          return -1;
      }
      return mainQ.remove();
    }

    int top() {
      // write your code here
        if(size()==0){
          System.out.println("Stack underflow");
          return -1;
      }
      return mainQ.peek();
    }
    