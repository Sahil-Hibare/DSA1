///////Infix Evaluation


public class Main{
  
    public static int precedence(char op){
        if(op=='+'){
            return 1;
        }else if(op=='-'){
            return 1;
        }else if(op=='*'){
            return 2;
        }else{
            return 2;
        }
    }
    
    public static int operation(int a,int b,char op){
        if(op=='+'){
            return a+b;
        }else if(op=='-'){
            return a-b;
        }else if(op=='*'){
            return a*b;
        }else{
            return a/b;
        }
    }
    
    
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String exp = br.readLine();
    
        Stack<Integer>  val=new Stack<>();
        Stack<Character> oper=new Stack<>();
    
        for(int i=0;i<exp.length();i++){
            char ch=exp.charAt(i);
    
            if(ch>='0'  && ch<='9'){
                val.push((int)ch-'0');
            }
            else if(ch=='('){
                oper.push(ch);
    
            }
            else if(ch==')'){
                while(oper.peek()!='('){
                   int b=val.pop();
                   int a=val.pop();
                   char op=oper.pop();
                   val.push(operation(a,b,op));
                }
                oper.pop();
            }else if(ch=='+' ||ch=='-'||ch=='*'|| ch=='/'){
                while(oper.size()>0 && oper.peek()!='(' &&
                precedence(ch)<=precedence(oper.peek())){
                    int b=val.pop();
                    int a=val.pop();
                    char op=oper.pop();
                    val.push(operation(a,b,op));
                }
                oper.push(ch);
            }
          
        }
        
          while(oper.size()>0){
                int b=val.pop();
                int a=val.pop();
                char op=oper.pop();
                val.push(operation(a,b,op));
            }
    
        
        System.out.println(val.pop());
     }
    }


////////////Infix Conversions

import java.io.*;
import java.util.*;

public class Main{
  public static int precedence(char op){
      if(op=='+'){
          return 1;
          }
      else if(op=='-'){
          return 1;
      }else if(op=='*'){
          return 2;
      }else {
          return 2;
      }
  }

  

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String exp = br.readLine();

    Stack<Character> operator=new Stack<>();
    Stack<String> postfix=new Stack<>();
    Stack<String>  prefix=new Stack<>();


    for(int i=0;i<exp.length();i++){
        char ch=exp.charAt(i);

        if(ch>='0'  && ch<='9' ||ch>='a' && ch<='z'  ||ch>='A'  && ch<='Z'){
            postfix.push(ch+"");
            prefix.push(ch+"");
        }
        else if(ch=='('){
            operator.push(ch);
        }
        else if(ch==')'){
            while(operator.peek()!='('){
                char op=operator.pop();
                String postB=postfix.pop();
                String postA=postfix.pop();
                postfix.push(postA+postB+op);

                String preB=prefix.pop();
                String preA=prefix.pop();
                prefix.push(op+preA+preB);
            }
            operator.pop();
        }else if(ch=='+' || ch=='-'||ch=='*'|| ch=='/'){
            while(operator.size()>0 && operator.peek()!='('
            && precedence(ch)<=precedence(operator.peek())){
                    char op=operator.pop();
                String postB=postfix.pop();
                String postA=postfix.pop();
                postfix.push(postA+postB+op);

                String preB=prefix.pop();
                String preA=prefix.pop();
                prefix.push(op+preA+preB);
            }
            operator.push(ch);
        }

    }
    while(operator.size()>0){
           char op=operator.pop();
                String postB=postfix.pop();
                String postA=postfix.pop();
                postfix.push(postA+postB+op);

                String preB=prefix.pop();
                String preA=prefix.pop();
                prefix.push(op+preA+preB);
    }
    System.out.println(postfix.peek());
    System.out.println(prefix.peek());
 }
}


////////////Postfix Evaluation And Conversions

public class Main{
  
    public static int operation(int a,int b, char op){
        if(op=='+'){
            return a+b;
        }else if(op=='-'){
            return a-b;
        }else if(op=='*'){
            return a*b;
        }else{
            return a/b;
        }
    }
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String exp = br.readLine();
    
        Stack<Integer>  eval=new Stack<>();
        Stack<String>  prefix=new Stack<>();
        Stack<String> infix=new Stack<>();
    
        for(int i=0;i<exp.length();i++){
            char ch=exp.charAt(i);
    
            if(ch>='0' && ch<='9' ){
                eval.push(ch-'0');
                prefix.push(ch+"");
                infix.push(ch+"");
            }
            else{
               ////eval
               int b=eval.pop();
               int a=eval.pop();
               eval.push(operation(a,b,ch));
    
    
               ////prefix
               String preb=prefix.pop();
               String prea=prefix.pop();
               prefix.push(ch+prea+preb);
    
               /////infix
               String inb=infix.pop();
               String ina=infix.pop();
               infix.push("("+ina+ch+inb+")");
            }
        }
        System.out.println(eval.peek());
        System.out.println(infix.peek());
        System.out.println(prefix.peek());
    
    
        // code
     }
    }

    