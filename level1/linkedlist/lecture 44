 /////Merge two sorted linked lists
///link  https://practice.geeksforgeeks.org/problems/merge-two-sorted-linked-lists/1

  
    Node sortedMerge(Node head1, Node head2) {
     // This is a "method-only" submission. 
     // You only need to complete this method
       Node dummy=new Node(-1);
       Node head=dummy,tail=dummy;
       while(head1!=null  && head2!=null){
           if(head1.data<=head2.data){
               tail.next=head1;
               head1=head1.next;
           }
           else{
               tail.next=head2;
               head2=head2.next;
           }
           tail=tail.next;
       }
       if(head1!=null) tail.next=head1;
       else tail.next=head2;
       
       return head.next;
   } 


/// Merge k Sorted Lists

///link  https://leetcode.com/problems/merge-k-sorted-lists/

   class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0){
            return null;
        }
      ListNode  head=merge(lists,0,lists.length-1);
        return head;
    }
    
    public ListNode merge(ListNode[] lists,int left,int right){
        if(left==right){
            return lists[left];
        }
        int mid=left+(right-left)/2;
        ListNode first=merge(lists,left,mid);
        ListNode second=merge(lists,mid+1,right);
        return sortedMerge(first,second);
        }
    
     ListNode sortedMerge(ListNode head1, ListNode head2) {
     // This is a "method-only" submission. 
     // You only need to complete this method
       ListNode dummy=new ListNode(-1);
       ListNode head=dummy,tail=dummy;
       while(head1!=null  && head2!=null){
           if(head1.val<=head2.val){
               tail.next=head1;
               head1=head1.next;
           }
           else{
               tail.next=head2;
               head2=head2.next;
           }
           tail=tail.next;
       }
       if(head1!=null) tail.next=head1;
       else tail.next=head2;
       
       return head.next;
   } 
}




/////148. Sort List
/////link  https://leetcode.com/problems/sort-list/



class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null){
            return head;
        }
        ListNode mid=middle(head);
        ListNode midnext=mid.next;
        mid.next=null;
        ListNode l1=sortList(head);
        ListNode l2=sortList(midnext);
        return mergeTwoLists(l1,l2);
        
    }
     public ListNode middle(ListNode head){
        ListNode fast=head;
        ListNode slow=head;
        ListNode prev=null;
        if(fast!=null && fast.next!=null){
            prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        if(fast==null)
           return prev;
        return slow;
    }
    
        ListNode mergeTwoLists(ListNode head1, ListNode head2) {
     // This is a "method-only" submission. 
     // You only need to complete this method
       ListNode dummy=new ListNode(-1);
       ListNode head=dummy,tail=dummy;
       while(head1!=null  && head2!=null){
           if(head1.val<=head2.val){
               tail.next=head1;
               head1=head1.next;
           }
           else{
               tail.next=head2;
               head2=head2.next;
           }
           tail=tail.next;
       }
       if(head1!=null) tail.next=head1;
       else tail.next=head2;
       
       return head.next;
   } 
}



/////2. Add Two Numbers
///link   https://leetcode.com/problems/add-two-numbers/
public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
           ListNode dummy=new ListNode(-1);
        ListNode head=dummy,tail=dummy;
           int carry=0;
        while(l1!=null || l2!=null  || carry>0){
            int d1=(l1==null)?0:l1.val;
            int d2=(l2==null)?0:l2.val;
            
            int temp=d1+d2+carry;
            ListNode tempnode=new ListNode(temp%10);
            carry=temp/10;
            
            tail.next=tempnode;
            tail=tempnode;
            
            if(l1!=null)l1=l1.next;
            if(l2!=null)l2=l2.next;
            
            
        } 
        return head.next;
    }



//////445. Add Two Numbers II
////link https://leetcode.com/problems/add-two-numbers-ii/

       public ListNode reversepi(ListNode head){
        if(head==null ||head.next==null){
            return head;
        }
        ListNode prev=null;
        ListNode curr=head;
        ListNode ahead=head;
         while(curr!=null){
             ahead=curr.next;
             curr.next=prev;
             prev=curr;
             curr=ahead;
         }
        return prev;
        
    
    }
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
         ListNode dummy=new ListNode(-1);
        ListNode head=dummy,tail=dummy;
        int carry=0;
        ListNode rl1=reversepi(l1);
        ListNode rl2=reversepi(l2);
        
        
        while(rl1!=null ||rl2!=null || carry>0){
            
            int d1=(rl1==null)?0:rl1.val;
            int d2=(rl2==null)?0:rl2.val;
            
            int sum=d1+d2+carry;
            ListNode temp=new ListNode(sum%10);
            carry=sum/10;
            
            tail.next=temp;
            tail=tail.next;
            if(rl1!=null)  rl1=rl1.next;
            if(rl2!=null)  rl2=rl2.next;
            
        }
        return reversepi(head.next);
    }
