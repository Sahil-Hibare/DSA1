//////Reverse Linked List (pointer - Recursive)

 private void reversePRHelper(Node node){
      // write your code here
      if(node==null ||node.next==null){
          return;
      }
      reversePRHelper(node.next);
      node.next.next=node;
    }

    public void reversePR(){
      // write your code here
      Node curr=head;
      reversePRHelper(curr);
      
      
      Node temp=head;
      head=tail;
      tail=temp;
      
      tail.next=null;
      
      
      
    }




    /////K Reverse In Linked List
      public void kReverse(int k) {
      // write your code here
    LinkedList prev = new LinkedList();
   
      while(size>0){
           LinkedList curr = new LinkedList();
          //extracting in a group of k
          if(size<k){
              while(size>0){
                  int val=head.data;
                  this.removeFirst();
                  curr.addLast(val);
              }
          }else{
          for(int i=0;i<k;i++){
              int val=head.data;
              this.removeFirst();
              curr.addFirst(val);
          }
          }
          if(prev.head==null){
              prev=curr;
          }else{
              prev.tail.next=curr.head;
              prev.tail=curr.tail;
              prev.size+=curr.size;
          }
      }
      prev.tail.next=null;
      this.head=prev.head;
      this.tail=prev.tail;
      this.size=prev.size;
    }


    ////middle of ll
    class Solution {
        public ListNode middleNode(ListNode head) {
            ListNode slow=head,fast=head;
            while(fast!=null && fast.next!=null){
                fast=fast.next.next;
                slow=slow.next;
            }
            return slow;
        }

///// Nth node from end of linked list 

   //Function to find the data of nth node from the end of a linked list.
   int getNthFromLast(Node head, int n)
   {
       // Your code here
       Node fast=head;
       Node slow=head;
       while( fast!=null && n-->0 ){
           fast=fast.next;
       }
       if(n>0){
         return -1;  
       } 
       while(fast!=null){
           fast=fast.next;
           slow=slow.next;
           
       }
       return slow.data;
       
   }


   /////234. Palindrome Linked List
   class Solution {
    
    public ListNode reverse(ListNode head){
        ListNode prev=null;
        ListNode curr=head;
        ListNode ahead=head;
        while(curr!=null){
            ahead=curr.next;
            curr.next=prev;
            prev=curr;
            curr=ahead;
        }
        return prev;
    }
    
    
    public ListNode middle(ListNode head){
        ListNode fast=head;
        ListNode slow=head;
        ListNode prev=null;
        if(fast!=null && fast.next!=null){
            prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        if(fast==null)
           return prev;
        return slow;
    }
    
    
    public boolean isPalindrome(ListNode head) {
        ListNode mid=middle(head);
        ListNode second=reverse(mid.next);
        while(head!=null && second !=null){
            if(head.val!=second.val){
                return false;
            }
            head=head.next;
            second=second.next;
            
        }
        return true;
    }
}



