//////852. Peak Index in a Mountain Array
class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        int start= 0;
        int end  = arr.length-1;
       while(start<end){
           int mid = start+(end-start)/2;
           if(arr[mid]> arr[mid+1]){
               end = mid;
           }else{
               start = mid+1;
           }
       }
       return start;
    }
}

/////1095. Find in Mountain Array
/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
 class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
         int peakidx = peakElement(mountainArr);
         int res1 = binarySearch(target,mountainArr, 0, peakidx);
         if(res1!=Integer.MAX_VALUE){
             return res1;
         }
         int res2 = binarySearch(target,mountainArr, peakidx+1,mountainArr.length()-1);
         if(res2== Integer.MAX_VALUE){
             return -1;
         }else{
             return res2;
         }
    }
    public int peakElement(MountainArray mountainArr){
        int start = 0;
        int end = mountainArr.length()-1;
        while(start<end){
            int mid = start+(end-start)/2;
            if(mountainArr.get(mid)> mountainArr.get(mid+1)){
                end = mid;
            }else{
                start = mid+1;
            }
        }
        return start;
    }

    public int binarySearch(int target, MountainArray mountainArr, int start, int end){
        int res =Integer.MAX_VALUE;
        boolean isAsc = mountainArr.get(start)< mountainArr.get(end);
        while(start<=end){
            
            if(isAsc == true){
                int mid = start+(end-start)/2;
               if(mountainArr.get(mid)== target){
                res =  Math.min(res,mid);
               }
                if(target<=mountainArr.get(mid)){
                    end = mid-1;
                }else{
                    start = mid+1;
                }
            }else{
                int mid = start+(end-start)/2;
                if(mountainArr.get(mid)== target){
                res =  Math.min(res,mid);
                 }
                 if(target>mountainArr.get(mid)){
                    end = mid-1;
                }else{
                    start = mid+1;
                }
            }
        }
        return res;
    }
}

/////162. Find Peak Element
class Solution {
    public int findPeakElement(int[] nums) {
        int start = 0;
        int end = nums.length-1;
        while(start<end){
            int mid = start+(end- start)/2;
            if(nums[mid]>nums[mid+1]){
                end = mid;
            }else{
                start = mid+1;
            }
        }
        return start;
    }
}

//////33. Search in Rotated Sorted Array
class Solution {
    public int search(int[] nums, int target) {
        int p = pivot(nums,target);
        System.out.println(p);
        int res = -1;
        if(target >=nums[0] && target<=nums[p]){
            res =  binarysearch(nums,target, 0,p);
        }else{
            res = binarysearch(nums,target,p+1,nums.length-1);
        }
        return res;
    }
    public int pivot(int[] nums, int target){
        int start = 0;
        int end = nums.length-1;
        while(start<end){
            int mid = start+(end-start)/2;
       
            if(mid+1< nums.length && nums[mid]>nums[mid+1]){
                return mid;
            }else if(mid-1>0 && nums[mid]<nums[mid-1]){
               return mid-1;
            }
            else if(nums[mid]>nums[start]){
                start=mid+1;
            }else if(nums[mid]<nums[end]){
                end = mid-1;
            }
        }
        return start;
    }

    public int binarysearch(int[] nums, int target, int start, int end){
        while(start<=end){
            int mid = start+(end-start)/2;
            if(nums[mid]==target){
                return mid;
            }else if(target<nums[mid]){
                end = mid-1;
            }else{
                start = mid+1;
            }
        }
        return -1;
    }
}
//////81. Search in Rotated Sorted Array II
class Solution {
    public boolean search(int[] nums, int target) {
        int p =pivot(nums,target);
        System.out.println(p);
        boolean res = false;
        if(target>=nums[0]&& target<=nums[p]){
           res  = binarysearch(nums, target, 0,p);
        }else{
            res = binarysearch(nums, target, p+1, nums.length-1);
        }
        return res;
    }
      public int pivot(int[] nums, int target){
        int start = 0;
        int end = nums.length-1;
        while(start<end){
            int mid = start+(end-start)/2;
       
            if(mid+1< nums.length && nums[mid]>nums[mid+1]){
                return mid;
            }else if(mid-1>=0 && nums[mid]<nums[mid-1]){
               return mid-1;
            }
            else if(nums[mid]>nums[start]){
                start=mid+1;
            }else if(nums[mid]<nums[start]){
                end = mid-1;
            }else {
              if(start+1<nums.length && nums[start]> nums[start+1]){
                  return start;
              }else if(end-1 >0 && nums[end]<nums[end-1]){
                  return end-1;
              }else{
                start++;
                end--;
              }

            }
        }
        return start;
    }
    
    public boolean binarysearch(int[] nums, int target, int start, int end){
        while(start<=end){
            int mid = start+(end-start)/2;
            if(nums[mid]==target){
                return true;
            }else if(target<nums[mid]){
                end = mid-1;
            }else{
                start = mid+1;
            }
        }
        return false;
    }
}
