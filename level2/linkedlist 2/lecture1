//////////////Split a Circular Linked List into two halves
class gfg
{
        // Function  to split a circular LinkedList
	    void splitList(circular_LinkedList list)
        {
             // Your code here
             if(list.head == null){
                 return ;
             }else if(list.head.next == list.head){
                 list.head1 = list.head;
                 list.head2 = null;
                 return;
             }
             
             Node fast = list.head;
             Node slow = list.head;
             while(fast.next != list.head && fast.next.next != list.head){
                 fast  = fast.next.next;
                 slow = slow.next;
             }
             
             list.head1 = list.head;
             list.head2 = slow.next;
             slow.next   = list.head1;
             
             if(fast.next == list.head){
                 fast.next = list.head2;
             }else{
                 fast.next.next = list.head2;
             }
             return;
	 }
}



///////////////////lru cache
class LRUCache {
  class Node{
      int key;
      int value;
      Node next;
      Node prev;
  }
    
    public void addFirst(Node node){
        Node m1 = head;
        Node p1 = head.next;
        node.prev = m1;
        node.next = p1;
        p1.prev = node;
        m1.next = node;
    }
    
    public void remove(Node node){
        Node m1 = node.prev;
        Node p1 = node.next;
        m1.next = p1;
        p1.prev = m1;
    }
    
    
    HashMap<Integer,Node> map;
    int cap;
    Node head;
    Node tail;
    public LRUCache(int capacity) {
        map = new HashMap<>();
        cap = capacity;
        head = new Node();
        tail = new Node();
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(map.containsKey(key) == false){
            return -1;
        }
        Node node = map.get(key);
        remove(node);
        addFirst(node);
        return node.value;
        
    }
    
    public void put(int key, int value) {
         if(map.containsKey(key) == false){
             if(cap == map.size()){
                 Node node = tail.prev;
                 map.remove(node.key);
                 remove(node);
             }
             Node node = new Node();
             node.key  = key;
             node.value = value;
             map.put(key,node);
             addFirst(node);
         }else{
             Node node = map.get(key);
             node.value = value;
             remove(node);
             addFirst(node);
         }
        
    }
}
