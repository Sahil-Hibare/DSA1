////////////////328. Odd Even Linked List
class Solution {
    public ListNode oddEvenList(ListNode head) {
        
        if(head == null ||head.next == null){
            return head;
        }
      
        ListNode oddH = head;
        ListNode  evenH = head.next;
        
        ListNode odd = oddH;
        ListNode even = evenH;
       
        
        ListNode temp = head.next.next;
        
          oddH.next = null;
         evenH.next = null;
        int counter = 1;
        
        while(temp != null){
            ListNode next = temp.next;
            temp.next = null;
            if(counter%2 == 1){
                odd.next  = temp;
                odd = temp;
            }else{
                even.next = temp;
                even = temp;
            }
            
            counter++;
            temp = next;
        }
        
        odd.next = evenH;
        return oddH;
        
        
    }
}
///////////////////143. Reorder List
class Solution {
    public void reorderList(ListNode head) {
        if(head == null ||head.next == null){
            return ;
        }
        left = head;
        helper(head);
    }
    boolean work = true;
    ListNode left;
    
    
    public void helper(ListNode right){
        if(right == null){
            return;
        }
        helper(right.next);
        if(work == true){
            if(left ==right ||left.next == right){
                right.next = null;
                work = false;
            }else{
                ListNode next= left.next;
                left.next = right;
                    right.next = next;
                left = next;
            }
        }
    }
}


/////////////////////////reverse data exchange
class Solution {
    public ListNode reverseList(ListNode head) {
        
        if(head == null ||head.next == null){
            return head;
        }
        left = head;
        reverse(head);
        return head;
    }
    
    
    ListNode left;
    boolean work=true;
    public void reverse(ListNode node){
        if(node == null){
            return;
        }
        
        reverse(node.next);
      if(work == true){ 
         if(left == node||left.next ==node){
             work = false;
            
         }
        int temp = left.val;
        left.val = node.val;
        node.val = temp;
        left = left.next;
      }
    }
}

///////pointer change
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        helper(head);
        head.next  = null;
        return nhead;
        
    }
    ListNode nhead;
    
    public void helper(ListNode node){
        if(node.next == null){
            nhead = node;
            return;
        }
        helper(node.next);
        
       node.next.next = node;
    }
}

///////pointer change iterative
public ListNode reverse(ListNode head){
    ListNode prev=null;
    ListNode curr=head;
    ListNode ahead=curr;
    while(curr!=null){
        ahead=curr.next;
        curr.next=prev;
        prev=curr;
        curr=ahead;
    }
    return prev;
}


///////////////Unfold Of Linkedlist
class Main {
    public static class ListNode {
        int val = 0;
        ListNode next = null;

        ListNode(int val) {
            this.val = val;
        }
    }
   
    public static ListNode reverse(ListNode head){
        ListNode prev = null;
        ListNode curr = head;
        ListNode ahead = curr;
        while(curr!= null){
            ahead = curr.next;
            curr.next = prev;
            prev = curr;
            curr = ahead;
        }
        return prev;
    }
    public static void unfold(ListNode head) {
       if(head == null ||head.next == null){
           return;
       }
       ListNode oddH = head;
       ListNode evenH = head.next;
       ListNode temp = head.next.next;
       oddH.next = null;
       evenH.next = null;
       ListNode odd = oddH;
       ListNode even = evenH;
       int counter = 1;
       while(temp!= null){
           ListNode next  = temp.next;
           temp.next  = null;

           if(counter %2 ==1){
               odd.next = temp;
               odd = temp;
           }else{
               even.next = temp;
               even = temp;
           }
           counter++;
           temp =next;
       }

        ListNode rev = reverse(evenH);
        odd.next = rev;
        head = oddH;
    }

    static void printList(ListNode node) {
        while (node != null) {
            System.out.print(node.val + " ");
            node = node.next;
        }
    }

    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        while (n-- > 0) {
            prev.next = new ListNode(scn.nextInt());
            prev = prev.next;
        }

        ListNode head = dummy.next;
        unfold(head);
        printList(head);
    }
}




///////////138. Copy List with Random Pointer

class Solution {
    public Node copyRandomList(Node head) {
        HashMap<Node,Node> map = new HashMap<>();
        Node nlist = new Node(-1);
        Node prev = nlist;
        Node curr = head;
        while(curr != null){
            Node node = new Node(curr.val);
            prev.next = node;
            
            map.put(curr,node);
            curr = curr.next;
            prev = prev.next;
             
        }
        nlist  = nlist.next;
        Node c1 = head;
        Node c2 = nlist;
        while(c1!=null){
            c2.random = (c1.random != null)?map.get(c1.random):null;
            
            c1 = c1.next;
            c2 = c2.next;
            
        }
        return nlist;
    }
}



///////////approach 2
/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null){
            return head;
        }
      Node temp = head;
        while(temp != null){
            Node copy = new Node(temp.val);
            copy.next = temp.next;
            temp.next = copy;
            temp = copy.next;
            
        }
    Node curr = head;
        while(curr != null){
            Node random = curr.random;
            curr.next.random = (random == null)?null: random.next;
            curr = curr.next.next;
        }
        Node newhead = new Node(-1);
        Node tail = newhead;
        
       
        curr = head;
        while(curr != null && curr.next != null){
            tail.next = curr.next;
            curr.next = curr.next.next;
            curr = curr.next;
            tail = tail.next;
        }
        return newhead.next;
        
        
    }
}


