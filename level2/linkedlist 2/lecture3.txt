////2. Add Two Numbers

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
          ListNode head = null;
        ListNode tail = null;
         int carry = 0;
        
          
        while(l1!= null || l2 != null || carry>0){
            int num1 = (l1== null)?0:l1.val;
            int num2 = (l2 == null)?0:l2.val;
            
            int sum = num1+num2+carry;
            carry = 0;
            int data = sum%10;
            carry  = sum/10;
            
            ListNode temp = new ListNode(data);
            if(head  == null){
                head = tail = temp;
            }else{
                tail.next = temp;
                tail = tail.next;
            }
            
           if(l1 != null) l1 = l1.next;
            if(l2!=null) l2 = l2.next;
            
        }
        return head;
    }
}


//////160. Intersection of Two Linked Lists
public class Solution {
    
   ListNode inter;
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        if(headA== null || headB == null){
            return null;
        }
        
       int sz1 = size(headA);
        int sz2 = size(headB);
        ListNode smaller;
        ListNode larger;
        
        int gap = sz1-sz2;
        
        if(gap>0){
            smaller = headB;
            ListNode temp = headA;
            for(int i = 0;i<gap;i++){
                temp = temp.next;
            }
            larger = temp;
        }else{
            gap = Math.abs(gap);
            smaller  = headA;
            ListNode temp = headB;
            for(int i = 0;i<gap;i++){
                temp = temp.next;
            }
            larger = temp;
            
        }
        ListNode res = new ListNode(-1);
         while(larger != null){
             if(larger == smaller){
                 res  = larger;
                 break;
             }else{
                 larger = larger.next;
                 smaller = smaller.next;
             }
         }
        return (res.val == -1)?null:res;
    }
    
    public int size(ListNode node){
        int size = 0;
        ListNode temp  = node;
        while(temp !=null){
            size++;
            temp  = temp.next;
        }
        return size;
    }
    
}

///////////141. Linked List Cycle
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        //ListNode temp = head;
        while(fast != null&&fast.next!=null){
            
            fast = fast.next.next;
            slow=  slow.next;
            if(fast == slow){
                return true;
            }
        }
        return false;
    }
}


///////142. Linked List Cycle II
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        ListNode fast = head;
        ListNode slow = head;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            slow = slow.next;
            if(fast == slow){
                fast = head;
                while(fast != slow){
                    fast = fast.next;
                    slow = slow.next;
                }
                return fast;
            }
        }
        return null;
    }
}

///////Remove loop in Linked List
class Solution
{
    //Function to remove a loop in the linked list.
    public static void removeLoop(Node head){
        // code here
        // remove the loop without losing any nodes
        Node fast = head;
        Node slow = head;
        Node prev = head;
        while(fast != null && fast.next != null){
            fast = fast.next.next;
            prev = slow;
            slow  = slow.next;
            if(fast == slow){
                fast = head;
                while(fast != slow){
                    prev = slow;
                    slow= slow.next;
                    fast = fast.next;
                }
                prev.next = null;
            }
        }
        
    }
}

