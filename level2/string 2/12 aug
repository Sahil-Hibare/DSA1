//////154. Find Minimum in Rotated Sorted Array II
class Solution {
    public int findMin(int[] nums) {
        int  lo = 0;
        int hi = nums.length-1;
        while(lo<hi){
            int mid = (lo+hi)/2;
            
            if(nums[hi]>nums[mid]){
                hi = mid;
            }else if(nums[hi]< nums[mid]){
                lo = mid+1;
            }else{
                hi--;
            }
        }
        
        return nums[lo];
    }
}





///////////////1392. Longest Happy Prefix
class Solution {
    public String longestPrefix(String s) {
        int[] lps = new int[s.length()];
        int len = 0;
        int i=1;
        while(i<s.length()){
            if(s.charAt(i)==s.charAt(len)){
                lps[i] = len+1;
                len++;
                i++;
            }else if(len >0){
                len = lps[len-1];
            }else{
                lps[i ] = 0;
                len = 0;
                i++;
            }
        }
        return s.substring(0,len);
    }
}


//////////////kmp algorithm Search Pattern (KMP-Algorithm)

class Solution
{
    
    ArrayList<Integer> search(String pat, String txt)
    {
        // your code here
        int[] lps = getlps(pat);
        int i = 0;
        int j = 0;
        ArrayList<Integer> res = new ArrayList<>();
        while(i < txt.length()){
            if(txt.charAt(i) == pat.charAt(j)){
                i++;
                j++;
                if(j == pat.length()){
                    res.add(i-j+1);
                     j = lps[j-1];
                 }
                
                }else if(j == 0){
                    i++;
                }else{
                    j = lps[j-1];
                }
            }
        
        return res;
    }
    
    public int[] getlps(String pat){
        int[] lps= new int[pat.length()];
        
        int  i  =1;
        int len = 0;
        while(i < pat.length()){
            if(pat.charAt(i) == pat.charAt(len)){
             lps[i] = len+1;
             i++;
             len++;
            }else if(len == 0){
                i++;
            }else{
                len = lps[len-1];
            }
        }
        return lps;
    }
}



  /////214. Shortest Palindrome
  class Solution {
    public String shortestPalindrome(String s) {
            String s1 = s+'$'+ new StringBuilder(s).reverse().toString();
    int[] lps= new int[s1.length()];
    int  i = 1;
    int len = 0;
    while(i< s1.length()){
        if(s1.charAt(i)==s1.charAt(len)){
            lps[i] = len+1;
            len++;
            i++;
        }else if(len == 0){
            lps[i] =0;
            len = 0;
            i++;
        }else{
            len = lps[len-1];
        }
    }
    
    int ppl = lps[lps.length-1];
    String right = s.substring(ppl);
    return new StringBuilder(right).reverse().toString()+s;
    }
}
