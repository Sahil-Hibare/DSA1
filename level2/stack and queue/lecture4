////////////////316. Remove Duplicate Letters

class Solution {
    public String removeDuplicateLetters(String s) {
        char[] str= s.toCharArray();
        int[] count=  new int[26];
        for(char ch : str){
            count[ch-'a']++;
        }
        Stack<Character> stk = new Stack<>();
        boolean[] vis = new boolean[26];
        for(char ch : str){
            
            count[ch-'a']--;
            if(vis[ch-'a']== false){
                while(stk.size()>0 && stk.peek()>ch && count[stk.peek()-'a']>0){
                    vis[stk.peek()-'a'] = false;
                    stk.pop();
                    
                }
                
                stk.push(ch);
                vis[ch-'a'] = true;
                
            }
        }
        
        StringBuilder sb = new StringBuilder();
        while(stk.size()>0){
            sb.append(stk.peek());
            stk.pop();
        }
        return sb.reverse().toString();
        
    }
}


////////////////////402. Remove K Digits
class Solution {
    public String removeKdigits(String num, int k) {
        if(k == num.length()){
            return "0";
        }
        Stack<Character> stk  = new Stack<>();
        
        for(int i = 0 ;i< num.length();i++){
            char ch = num.charAt(i);
            
            while(stk.size()>0 && k>0 && ch<stk.peek()){
                stk.pop();
                k--;
            }
            stk.push(ch);
        }
        while(k>0){
            stk.pop();
            k--;
        }
        StringBuilder sb = new StringBuilder();
        while(stk.size()>0){
            sb.append(stk.pop());
        }
        
        for(int i = sb.length()-1;i>=0;i--){
            if(sb.charAt(i) == '0'){
                sb.deleteCharAt(i);
            }else{
                break;
            }
        }
        
        String res = sb.reverse().toString();
        return res.length()==0 ?"0":res;
        
    }
}


//////////////////////////Longest Bitonic subsequence
class Solution
{
    public int LongestBitonicSequence(int[] nums)
    {
        // Code here
        int[] lis1 = lis(nums);
        int[] lds1 = lds(nums);
        
        int[] res = new int[nums.length];
        int max = 0;
        for(int i = 0;i<nums.length;i++){
            res[i] = lis1[i]+lds1[i]-1;
            max = Math.max(res[i],max);
        }
        return max;
    }
    
    public int[] lis(int[] nums){
        int[] res = new int[nums.length];
        res[0] = 1;
        for(int i = 1;i<nums.length;i++){
            int max = 0;
            for(int j = 0;j<i;j++){
                if(nums[j]< nums[i]){
                    max= Math.max(max,res[j]);
                }
            }
            res[i] = max+1;
        }
        return res;
    }
    
    public int[] lds(int[] nums){
        int[] lds=  new int[nums.length];
        lds[nums.length-1] = 1;
        for(int i = nums.length-1;i>=0;i--){
            int max = 0;
            for(int j = nums.length-1;j>i;j--){
                if(nums[j]< nums[i]){
                    max= Math.max(max,lds[j]);
                }
            }
            lds[i] = max+1;
        }
        return lds;
    }
}
