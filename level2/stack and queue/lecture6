//////////////////N Stacks In An Array
import java.util.* ;
import java.io.*; 
public class NStack {
    // Initialize your data structure.
     int[] arr;
    int[] next;
    int[] top;
    int free;
    public NStack(int N, int S) {
        // Write your code here.
        arr = new int[S];
        top = new int[N+1];
        free = 0;
        next = new int[S];
        for(int i = 0;i<next.length-1;i++){
            next[i] = i+1;
        }
        next[next.length-1] = -1;
        Arrays.fill(top,-1);
    }

    // Pushes 'X' into the Mth stack. Returns true if it gets pushed into the stack, and false otherwise.
    public boolean push(int x, int m) {
        // Write your code here.
        if(free == -1){
            return false;
        }
        int curr = free;
        free = next[free];
        next[curr] = top[m];
        top[m] = curr;
        arr[curr] = x;
        return true;
    }

    // Pops top element from Mth Stack. Returns -1 if the stack is empty, otherwise returns the popped element.
    public int pop(int m) {
        // Write your code here.
        if(top[m] ==-1){
            return -1;
        }
        int curridx = top[m];
        top[m] = next[curridx];
        next[curridx] = free;
        free = curridx;
        return arr[curridx];
    }
}


/////////////N Queue Using Array
public class NQueue {
	// Initialize your data structure.
    int[] arr;
    int[] next;
    int free;
    int[] fq;
    int [] eq;
	public NQueue(int n, int s) {
		// Write your code here.
        arr = new int[s];
        free = 0;
        fq = new int[n+1];
        eq = new int[n+1];
        next  = new int[s];
        for(int  i =0;i<s-1;i++){
            next[i] = i+1;
        }
        next[next.length-1] = -1;
        
        for(int i = 0;i<=n;i++){
            fq[i] = eq[i] = -1;
        }
        
	}

	// Enqueues 'X' into the Mth queue. Returns true if it gets pushed into the queue, and false otherwise.
	public boolean enqueue(int x, int m) {
		// Write your code here.
        if(free == -1){
            return false;
        }
        int curr = free;
        arr[curr] = x;
        free = next[free];
        next[curr] = -1;
        if(eq[m]==-1){
            fq[m] = eq[m] = curr;
        }else{
            next[eq[m]] = curr;
            eq[m] = curr;
        }
        return true;
        
	}

	// Dequeues top element from Mth queue. Returns -1 if the queue is empty, otherwise returns the popped element.
	public int dequeue(int m) {
		// Write you code here.
        if(fq[m] == -1){
            return -1;
        }
        int curr = fq[m];
        if(fq[m] == eq[m]){
            fq[m] = eq[m] =-1;
        }else{
            fq[m] = next[curr];
        }
        int val = arr[curr];
        next[curr] = free;
        free = curr;
        return val;
        
	}
};





