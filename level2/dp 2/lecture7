
//////////////////////188. Best Time to Buy and Sell Stock IV   k transaction
class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices.length==0||k==0){
            return 0;
        }
        int[][] dp = new int[k+1][prices.length];
        
        for(int i = 0;i<dp.length;i++){
            for(int j = 0; j <dp[0].length;j++){
                 if(i == 0||j==0){
                     dp[i][j] = 0;
                 }else{
                     dp[i][j] = dp[i][j-1];
                     for(int m = 0; m<j; m++){
                         dp[i][j] = Math.max(dp[i][j],dp[i-1][m]+prices[j]-prices[m]);
                     }
                 }
            }
        }
        return dp[k][prices.length-1];
    }
}


///////approach 2 
class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices.length==0||k==0){
            return 0;
        }
        int[][] dp = new int[k+1][prices.length];
        
        for(int i = 0;i<dp.length;i++){
            int maxp = Integer.MIN_VALUE;
            for(int j = 0; j <dp[0].length;j++){
                 if(i == 0||j==0){
                     dp[i][j] = 0;
                 }else{
                     maxp  = Math.max(dp[i-1][j-1]-prices[j-1],maxp);
                     dp[i][j] = Math.max(dp[i][j-1],maxp+prices[j]);
                 }
            }
        }
        return dp[k][prices.length-1];
    }
}


////////////////////Tiling With 2 * 1 Tiles
public static void main(String[] args) throws Exception {
    Scanner sc = new  Scanner(System.in);
    int n = sc.nextInt();
    int[] dp = new int[n+1];

    dp[0] = 0;
    dp[1] = 1;
    dp[2] = 2;
    for(int i= 3;i<=n;i++){
        dp[i] = dp[i-1]+dp[i-2];
    }

    System.out.println(dp[n]);
  }


////////////Tiling With M * 1 Tiles
public static void main(String[] args) throws Exception {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    int m = sc.nextInt();
      int[] dp = new int[n+1];
    dp[0] = 0;
    for(int  i = 1;i<=n;i++){
        if(i<m){
            dp[i] = 1;
        }else if(i == m){
            dp[i] = 2;
        }else{
            dp[i] = dp[i-1] + dp[i-m];
        }
    }

    System.out.println(dp[n]);

}




///////////////////Friends Pairing Problem
class Solution
{
    public long countFriendsPairings(int n) 
    { 
       //code here
       long  mod = 1000000007;
       long[] dp = new long[n+1];
      if(n==0){
          return 0;
      }else if(n==1){
          return 1;
      }else if(n==2){
          return 2;
      }
       dp[0] = 0;
       dp[1] = 1;
       dp[2] = 2;
       for(int i=3;i<=n;i++){
           dp[i] = (dp[i-1]+dp[i-2]*(i-1))%mod;;
       }
       return dp[n];
    }
} 