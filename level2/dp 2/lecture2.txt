///////300. Longest Increasing Subsequence
class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] lis = new int[nums.length];
        lis[0] =1;
        for(int i = 1;i<nums.length;i++){
            int max = 0;
            for(int j =0;j<i;j++){
                if(nums[j]<nums[i]){
                    max = Math.max(max,lis[j]);
                }
            }
            lis[i] = max+1;
        }
        
        int len = 0;
        for(int val : lis){
            len = Math.max(len,val);
        }
        return len;
    }
}



/////////approch 2 binary search
class Solution {
    public int lengthOfLIS(int[] nums) {
     int[] tails = new int[nums.length];
       
        tails[0] = nums[0];
         int len = 1;
        
        for(int i=1;i< nums.length;i++){
            if(nums[i]> tails[len-1]){
                tails[len] = nums[i];
                len++;
            }else{
                int idx = Arrays.binarySearch(tails,0,len-1,nums[i]);
                if(idx < 0 ){
                    idx = -idx;
                    idx  = idx-1;
                }
                tails[idx] = nums[i];
            }
        }
        return len;
    }
}





////buolding bridgres  ////gfg
static int maxNonOverLappingBridges(int[][] arr){
    Arrays.sort(arr,(a,b)->{
        if(a[0] == b[0]){
            return a[1]-b[1];
        }
        return a[0]-b[0];
    });
    int[] lis = new int[arr.length];
    lis[0] = 1;
    for(int i = 1;i<arr.length;i++){
        int max = 0;
        for(int j = 0;j<i;j++){
            if(arr[j][1]<=arr[i][1]){
                max = Math.max(max,lis[j]);
            }
        }
        lis[i] = max;
    }
    int len = 0;
    for(int val : lis){
        len = Math.max(val,len);
    }
    return len;
}


///////354. Russian Doll Envelopes
class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        Arrays.sort(envelopes,(a,b)->{
            if(a[0] == b[0]){
                return b[1]-a[1];
            }
            return a[0]-b[0];
        });
        
        int[] lis = new int[envelopes.length];
        lis[0] = 1;
        for(int i = 1;i< envelopes.length;i++){
            int max = 0;
            for(int j=0;j<i;j++){
                if(envelopes[j][1]<envelopes[i][1]){
                    max = Math.max(max,lis[j]);
                }
            }
            lis[i] = max+1;
        }
        
        int len = 0;
        for(int val : lis){
            len = Math.max(len,val);
        }
        return len;
    }
}

///////approach 2 binary search
class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        Arrays.sort(envelopes,(a,b)->{
            if(a[0] == b[0]){
                return b[1]-a[1];
            }
            return a[0]-b[0];
        });
        
        int[] tails = new int[envelopes.length];
        int len = 1;
        tails[0] = envelopes[0][1];
        for(int i =1;i< envelopes.length;i++){
            if(envelopes[i][1]> tails[len-1]){
                tails[len] = envelopes[i][1];
                len++;
            }else{
                int idx= Arrays.binarySearch(tails,0,len-1,envelopes[i][1]);
                if(idx<0){
                    idx  = -idx;
                    idx = idx-1;
                }
                tails[idx] = envelopes[i][1];
            }
        }
        return len;
    }
}

