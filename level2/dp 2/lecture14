////////////263. Ugly Number
class Solution {
    public boolean isUgly(int n) {
      if(n<=0){
          return false;
      }
        int[] div = {2,3,5};
        for(int divs:div){
            while(n%divs == 0){
                n = n/divs;
            }
        }
        return (n>1)? false:true;
        
    }
}

///////264. Ugly Number II
class Solution {
    public int nthUglyNumber(int n) {
      int[] dp = new int[n+1];
        dp[1] = 1;
        int iof2 = 1;
        int iof3 = 1;
        int iof5 = 1;
        for(int i = 2;i<=n;i++){
            
            int fo2 = dp[iof2]*2;
            int fo3 = dp[iof3]*3;
            int fo5 = dp[iof5]*5;
            dp[i] = Math.min(fo2,Math.min(fo3,fo5));
            if(dp[i] == fo2){
                 iof2++;
            }
            if(dp[i]== fo3){
                iof3++;
            }
            if(dp[i] == fo5){
                iof5++;
            }
            
        }
        return dp[n];
    }
}

///////////////////313. Super Ugly Number
class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        long[] dp= new long[n+1];
        dp[1] = 1;
        int[] idices = new int[primes.length];
        Arrays.fill(idices,1);
        for(int i = 2; i<=n ;i++){
            long ans = Integer.MAX_VALUE;
            
            for(int j = 0;j< primes.length;j++){
                 int prm = primes[j];
                int idx = idices[j];
                ans = Math.min(ans, prm*dp[idx]);
            }
              dp[i] = ans;
            for(int j = 0;j<primes.length;j++){
                int prm = primes[j];
                int idx = idices[j];
                if(dp[i]==prm*dp[idx]){
                    idices[j] = idx+1;
                }
                
            }
          
        }
        return (int)dp[n];
    }
}
////////115. Distinct Subsequences
class Solution {
    public int numDistinct(String s, String t) {
        int[][] dp = new int[t.length()+1][s.length()+1];
        
        for(int i = 0;i<dp.length;i++){
            for(int j = 0;j<dp[0].length;j++){
                if(i ==0 && j==0){
                    dp[i][j] = 1;
                }else if(i==0){
                    dp[i][j] = 1;
                }else if(j==0){
                    dp[i][j]= 0;
                }else{
                    if(t.charAt(i-1)==s.charAt(j-1)){
                        dp[i][j] = dp[i-1][j-1]+dp[i][j-1];
                    }else{
                        dp[i][j]  = dp[i][j-1];
                    }
                }
            }
        }
        return dp[t.length()][s.length()];
    }
}

////940. Distinct Subsequences II
class Solution {
    public int distinctSubseqII(String s) {
        long mod= 1000000007;
         long[] dp = new long[s.length()+1];
        dp[0] = 1;
        dp[1] = 2;
        int[] charidx = new int[26];
        charidx[s.charAt(0)-'a'] =1;
        for(int i = 2;i<=s.length();i++){
            dp[i] = (2*dp[i-1])%mod;
            
            int ch = s.charAt(i-1)-'a';
            if(charidx[ch]!=0){
                int idx = charidx[ch];
                dp[i] = (dp[i]-dp[idx-1])%mod;
            }
            charidx[ch] = i;
            dp[i] = (dp[i]<0)?dp[i]+mod:dp[i];
        }
        return (int)dp[s.length()]-1;
         
    }
}