////////////////2014. Longest Subsequence Repeated k Times
class Solution {
    public String longestSubsequenceRepeatedK(String s, int k) {
        int[] map = new int[26];
        for(int i = 0;i<s.length();i++){
            char ch = s.charAt(i);
            map[ch-'a']++;
        }
        
        ArrayList<Character> valid = new ArrayList<>();
        for(int i = 0;i <map.length;i++){
            if(map[i] >=k){
                valid.add((char)('a'+i));
            }
        }
        
        Queue<String> q = new LinkedList<>();
        q.add("");
        String res = "";
        while(q.size()>0){
            String rem = q.remove();
            for(char ch: valid){
                String next = rem+ch;
                if(isKSub(s,next,k)== true){
                    q.add(next);
                    res = next;
                }
            }
                
        }
        return res;
    }
    
    public boolean isKSub(String s, String sub,int k){
        int rep = 0;
        int j  = 0;
        for(int  i =0;i<s.length();i++){
            if(s.charAt(i)==sub.charAt(j)){
                j++;
            }
            if(j == sub.length()){
                rep++;
                j = 0;
            }
            if(rep>=k){
                return true;
            }
        }
        return false;
    }
}



///////////////////546. Remove Boxes
class Solution {
    public int removeBoxes(int[] boxes) {
        int n = boxes.length;
        int[][][] dp = new int[n][n][n];
       int res =  helper(boxes, 0,n-1, 0, dp);
        return res;
    }
    
    
    public int helper(int[] boxes, int i, int j, int k, int[][][] dp){
        if(i>j){
            return 0;
        }
        
        if(dp[i][j][k] != 0){
            return dp[i][j][k];
        }
        
        int ii = i;
        int kk = k;
        while(ii+1 <= j && boxes[ii+1] == boxes[ii]){
            ii++;
            kk++;
        }
        
        int res = (kk+1)*(kk+1)+ helper(boxes,ii+1,j,0,dp);
        for(int m = ii+1;m<=j;m++){
            if(boxes[m] == boxes[ii]){
                int fact = helper(boxes,ii+1,m-1,0,dp)+
                          helper(boxes,m,j,kk+1,dp);
                res = Math.max(res,fact);
            }
        }
        dp[i][j][k] = res;
        return res;
        
    }
}