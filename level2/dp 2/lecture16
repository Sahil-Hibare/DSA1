//////////////////Largest Sum Subarray of Size at least K
class Compute {
    
    public long maxSumWithK(long a[], long n, long k)
    {
       long[] maxsum = new long[a.length];
       long currsum = a[0];
       maxsum[0] = a[0];
       for( int i = 1;i<a.length;i++){
           if(currsum+a[i]>a[i]){
              currsum +=a[i];
           }else{
               currsum = a[i];
           }
           maxsum[i] = currsum;
       }
       long sum = 0;
       for( int i = 0;i<k;i++){
            sum+=a[i];
       }
       long res = sum;
       for(int  i = (int)k;i<a.length;i++){
           sum += (long)a[i];
           sum -= (long)a[i-(int)k];
           
           /////sum has k  window value;
           res  = Math.max(res,sum);
           res = Math.max(res,sum+maxsum[i-(int)k]);
       }
       return res;
    }
}


//////////////////10. Regular Expression Matching


class Solution {
    public boolean isMatch(String s, String p) {
        boolean[][] dp = new boolean[s.length()+1][p.length()+1];
        
        for(int i = dp.length-1;i>=0;i--){
            for(int j = dp[0].length-1;j>=0;j--){
                if(i ==s.length() && j ==p.length()){
                    dp[i][j] = true;
                    
                }else if(j == p.length()){
                    dp[i][j] = false;
                    
                }else if(i ==s.length()){
                    if(j+2<=p.length() && p.charAt(j+1)=='*'){
                        dp[i][j] = dp[i][j+2];
                    }else{
                        dp[i][j] = false;
                    }
                    
                }else{
                    if(j+2<=p.length() && p.charAt(j+1)=='*'){
                        if(s.charAt(i)==p.charAt(j)||p.charAt(j)=='.'){
                            dp[i][j] = dp[i][j+2]||dp[i+1][j+2]||dp[i+1][j];
                        }else{
                            dp[i][j] = dp[i][j+2];
                        }
                        
                    }else{
                        if(s.charAt(i)==p.charAt(j) || p.charAt(j)=='.'){
                            dp[i][j] = dp[i+1][j+1];
                        }else{
                            dp[i][j] = false;
                        }
                    }
                }
            }
        }
        return dp[0][0];
    }
}

////////45. Jump Game II
class Solution {
    public int jump(int[] nums) {
        if(nums.length <=1){
            return 0;
        }
        int curr = 0;
        int ans = 0;
        int prev = 0;
        while(curr<nums.length){
            if(curr+nums[curr]>= nums.length-1){
                ans++;
                return ans;
            }
            int reach = curr+nums[curr];
            int inter = curr;
            for(int j = prev+1;j<=reach && j<nums.length ;j++){
                if(j+nums[j]>=inter+nums[inter]){
                    inter = j;
                }
                  
            }
              prev = curr+nums[curr];
            curr = inter;
          
             ans++;
            
        }
        return ans;
    }
}
