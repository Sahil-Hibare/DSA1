/////////burst balloons
class Solution {
    public int maxCoins(int[] nums) {
        int[][] dp = new int[nums.length][nums.length];
        
        for(int g = 0;g < dp.length;g++){
            for(int i = 0,j = g;j<dp[0].length;i++,j++){
                int max = Integer.MIN_VALUE;
                
                for(int k = i;k<=j;k++){
                    int left = k==i ? 0 : dp[i][k-1];
                    int right = k==j ? 0 : dp[k+1][j];
                    int val = (i==0?1:nums[i-1])*nums[k]*(j==nums.length-1?1:nums[j+1]);
                    max = Math.max(max,left+right+val);
                }
                dp[i][j] = max;
            }
        }
        return dp[0][nums.length-1];
    }
}



//////////1039. Minimum Score Triangulation of Polygon
class Solution {
    public int minScoreTriangulation(int[] values) {
        int[][] dp  = new int[values.length][values.length];
        
        for(int g = 0;g<dp.length;g++){
            for(int i = 0,j = g;j<dp[0].length;i++,j++){
                if(g==0||g==1){
                    dp[i][j] = 0;
                }else{
                    int min = Integer.MAX_VALUE;
                    for(int k = i+1;k<=j-1;k++){
                        int tri = values[i]*values[j]*values[k];
                        int left = dp[i][k];
                        int right= dp[k][j];
                        int total = tri+left+right;
                        min = Math.min(min,total);
                    }
                    dp[i][j] = min;
                }
            }
        }
        
        return dp[0][dp[0].length-1];
    }
}


