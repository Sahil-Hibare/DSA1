////////////////////Longest Common Substring
class Solution{
    int longestCommonSubstr(String S1, String S2, int n, int m){
        // code here
        int[][] dp = new int[n+1][m+1];
        int res = 0;
        for(int i = 1; i< dp.length;i++){
            for(int j = 1;j<dp[0].length;j++){
                if(S1.charAt(i-1)==S2.charAt(j-1)){
                    dp[i][j] = 1+dp[i-1][j-1];
                    res  = Math.max(res,dp[i][j]);
                }
            }
        }
        return res;
    }
}


///////647. Palindromic Substrings    count of palindromic substring
class Solution {
    public int countSubstrings(String s) {
         boolean[][] dp = new boolean[s.length()][s.length()];
        
        int res = 0;
        for(int g = 0;g<dp.length;g++){
            for(int i = 0,j =g;j<dp[0].length;i++,j++){
                if(g == 0){
                    dp[i][j] = true;
                }else if(g==1){
                    dp[i][j] = (s.charAt(i)== s.charAt(j));
                }else{
                    dp[i][j] = (s.charAt(i)== s.charAt(j)) && dp[i+1][j-1];
                    
                }
                if(dp[i][j]){
                    res++;
                }
            }
        }
        return res;
    }
}


//////5. Longest Palindromic Substring     print longest palindromic substring

class Solution {
    public String longestPalindrome(String s) {
        boolean[][] dp = new boolean[s.length()][s.length()];
        
        String res = "";
        for(int g = 0;g<dp.length;g++){
            for(int i = 0,j =g;j<dp[0].length;i++,j++){
                if(g == 0){
                    dp[i][j] = true;
                }else if(g==1){
                    dp[i][j] = (s.charAt(i)== s.charAt(j));
                }else{
                    dp[i][j] = (s.charAt(i)== s.charAt(j)) && dp[i+1][j-1];
                    
                }
                if(dp[i][j]){
                    res = s.substring(i,j+1);
                }
            }
        }
        return res;
    }
}


///////////Count Palindromic Subsequences
class Solution
{
    long countPS(String str)
    {
        // Your code here
        long mod = 1000000007;
        long[][] dp = new long[str.length()][str.length()];
        for(int g = 0;g<dp.length;g++){
            for(int i = 0,j=g;j<dp[0].length;i++,j++){
                if(g==0){
                    dp[i][j] = 1;
                }else{
                    if(str.charAt(i)==str.charAt(j)){
                        dp[i][j] = (dp[i][j-1]+dp[i+1][j]+1)%mod;
                    }else{
                        dp[i][j] = (dp[i][j-1]+dp[i+1][j]-dp[i+1][j-1]+mod)%mod;
                    }
                }
            }
        }
        return dp[0][dp[0].length-1];
        
    }
}


///////////////730. Count Different Palindromic Subsequences

class Solution {
    public int countPalindromicSubsequences(String s) {
        int mod = 1000000007;
        
        HashMap<Character, Integer> map = new HashMap<>();
        int[] prev = new int[s.length()];
        for(int i = 0;i<s.length();i++){
            char ch = s.charAt(i);
            if(map.containsKey(ch)){
                prev[i] = map.get(ch);  
            }else{
                prev[i] = -1;
            }
            map.put(ch,i);
        }
        
        int[] next = new int[s.length()];
        map.clear();
        for(int i = s.length()-1;i>=0;i--){
            char ch = s.charAt(i);
            if(map.containsKey(ch)){
                next[i] = map.get(ch);
            }else{
                next[i] = s.length();
            }
            map.put(ch,i);
        }
        
        int[][] dp = new int[s.length()][s.length()];
        
        for(int g = 0;g<dp.length;g++){
            for(int i = 0,j = g; j < dp[0].length;i++,j++){
                if(g ==0){
                    dp[i][j] = 1;
                }else if(g==1){
                    dp[i][j] = 2;
                }else{
                    char sc = s.charAt(i);
                    char se = s.charAt(j);
                    
                    if(sc != se){
                        dp[i][j] = (dp[i+1][j]+dp[i][j-1]-dp[i+1][j-1]);
                    }else{
                        int n = next[i];
                        int p = prev[j];
                        if(n>p){
                            dp[i][j] = (2*dp[i+1][j-1]+2)%mod;
                        }else if(n==p){
                            dp[i][j] = (2*dp[i+1][j-1]+1)%mod;
                        }else{
                            dp[i][j] = (2*dp[i+1][j-1]-dp[n+1][p-1])%mod;
                        }
                    }
                }
                 dp[i][j] = dp[i][j] < 0 ? dp[i][j] + 1000000007 : dp[i][j] % 1000000007;
            }
        }
       return dp[0][s.length()-1]%mod;
        
        
        
    }
}



