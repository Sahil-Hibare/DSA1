
////////////////Longest Repeating Subsequence


class Solution
{
    public int LongestRepeatingSubsequence(String str)
    {
        // code here
        int[][] dp = new int[str.length()+1][str.length()+1];
        
        for(int  i = dp.length-2;i>=0;i--){
            for(int j = dp[0].length-2;j>=0;j--){
                if(str.charAt(i)==str.charAt(j) && (i != j)){
                    dp[i][j] = 1+dp[i+1][j+1];
                }else{
                    dp[i][j] = Math.max(dp[i+1][j],dp[i][j+1]);
                }
            }
        }
        return dp[0][0];
    }
}

///////////////72. Edit Distance
class Solution {
    public int minDistance(String word1, String word2) {
        int[][]dp = new int[word1.length()+1][word2.length()+1];
        
        for(int i = 0;i<dp.length;i++){
            for(int j = 0;j<dp[0].length;j++){
                if(i==0 && j==0){
                    dp[i][j] = 0;
                }else if(i==0){
                    dp[i][j] = 1+dp[i][j-1];
                }else if(j==0){
                    dp[i][j] = 1+dp[i-1][j];
                }else{
                    if(word1.charAt(i-1) == word2.charAt(j-1)){
                        dp[i][j] = dp[i-1][j-1];
                    }else{
                        int f1 = dp[i-1][j-1];
                        int f2 = dp[i][j-1];
                        int f3 = dp[i-1][j];
                        dp[i][j] = Math.min(f1,Math.min(f2,f3))+1;
                    }
                }
            }
        }
        return dp[word1.length()][word2.length()];
    }
}


////////////////688. Knight Probability in Chessboard

class Solution {
    public double knightProbability(int n, int k, int row, int column) {
         double[][][] dp = new double[n][n][k+1];
        dp[row][column][0] = 1;
        
        int[][] dir = {{1,-2},{2,-1},{2,1},{1,2},{-1,2},{-2,1},{-2,-1},{-1,-2}};
        
        for(int move = 1;move<=k;move++){
            for(int i=0;i<dp.length;i++){
                for(int j = 0;j<dp[0].length;j++){
                   if(dp[i][j][move-1]!=0.0){
                       for(int[] dirs:dir){
                           int x = i+dirs[0];
                           int y = j+dirs[1];
                           
                           if(x>=0 &&x<n && y>=0 && y<n){
                               dp[x][y][move]+=dp[i][j][move-1]/8;
                           }
                       }
                }
               }
            }
        }
        
        double res = 0;
        for(int i = 0;i<dp.length;i++){
            for(int j = 0;j<dp[0].length;j++){
                res+=dp[i][j][k];
            }
        }
        return res;
    }
}

//////////////////////403. Frog Jump  
/////memoization


class Solution {
    public boolean canCross(int[] stones) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int i = 0;i<stones.length;i++){
            map.put(stones[i],i);
        }
        int[][] memo = new int[stones.length][stones.length];
        for (int[] row : memo) {
            Arrays.fill(row, -1);
        }
        return jumpnext(stones,0,0,map,memo);
        
    }
    
    public boolean jumpnext(int[] stones, int idx, int jump,HashMap<Integer,Integer> map,int[][] memo){
        if(idx == stones.length-1){
            memo[idx][jump] = 1;
            return true;
        }
         
        if(memo[idx][jump] >=0){
            return memo[idx][jump]==1?true:false;
        }
        int stone = stones[idx];
        int first = stone+jump-1;
         if(map.containsKey(first) &&(map.get(first)>idx) ){
                 boolean temp1 =   jumpnext(stones,map.get(first),jump-1,map,memo);
                 if(temp1){
                     memo[idx][jump] = 1;
                     return true;
               }
         }
        int sec = stone+jump;
         if(map.containsKey(sec) &&(map.get(sec)>idx) ){
            
                 boolean temp1 =   jumpnext(stones,map.get(sec),jump,map,memo);
                 if(temp1){
                      memo[idx][jump] = 1;
                     return true;
                 }
             
         }
        int third = stone+jump+1;
         if(map.containsKey(third) &&(map.get(third)>idx) ){
                 boolean temp1 =   jumpnext(stones,map.get(third),jump+1,map,memo);
                 if(temp1){
                      memo[idx][jump] = 1;
                     return true;
                 }
            
         }
        memo[idx][jump] = 0;
        return false;
        
    }
}


////////////tabulation


class Solution {
    public boolean canCross(int[] stones) {
       
        HashMap<Integer,HashSet<Integer>> hmap  = new HashMap<>();
        for(int i = 0;i < stones.length;i++){
            hmap.put(stones[i],new HashSet<Integer>());
        }
        hmap.get(0).add(1);
        for(int i=0;i<stones.length-1;i++){
            int stone = stones[i];
            for(int step:hmap.get(stone)){
                int reach = stone+step;
                if(hmap.containsKey(reach)){
                    if(reach == stones[stones.length-1]){
                        return true;
                    }
                    
                    HashSet<Integer> steps = hmap.get(reach);
                    if(step-1>0){
                        steps.add(step-1);
                    }
                    steps.add(step);
                    steps.add(step+1);
                }
            }
        }
        return false;
    }
    

} 

//////////////////////44. Wildcard Matching
class Solution {
    public boolean isMatch(String s, String p) {
        int[][] memo = new int[s.length()+1][p.length()+1];
       for (int[] row : memo) {
            Arrays.fill(row, -1);
        }
        return recur(s,p,0,0,memo)==1?true:false;
    }
    public int recur(String s, String p, int i, int j,int[][] memo){
        if(i == s.length() && j == p.length()){
            memo[i][j] =1;
           return 1;
        }
      else if(i== s.length() || j == p.length()){
          if(i==s.length() && p.charAt(j)=='*'){
              memo[i][j]= recur(s,p,i,j+1,memo);
              return memo[i][j];
          }
          memo[i][j] = 0;
           return 0;
        }
        
        if(memo[i][j]>=0){
            return memo[i][j];
        }
        
        char pat = p.charAt(j);
        if(pat =='?'){
             memo[i][j] = recur(s,p,i+1,j+1,memo);
            return memo[i][j];
        }else if(pat == '*'){
            
            /////ignore
            int res1 = recur(s,p,i,j+1,memo);
            /////one char
            int res2 = recur(s,p,i+1,j+1,memo);
            /////many char
            int res3 = recur(s,p,i+1,j,memo);
            
            memo[i][j]= res1|res2|res3;
            return memo[i][j];
        }else{
            if(s.charAt(i)==p.charAt(j)){
                memo[i][j] =  recur(s,p,i+1,j+1,memo);
                return memo[i][j];
            }else{
                memo[i][j] = 0;
                return 0;
            }
        }
    }
}


///////tabulation
class Solution {
    public boolean isMatch(String s, String p) {
       
        boolean[][] dp = new boolean[s.length()+1][p.length()+1];
        
        for(int i = dp.length-1;i>=0;i--){
            for(int j=dp[0].length-1;j>=0;j--){
                if(i==dp.length-1 && j==dp[0].length-1){
                    dp[i][j] = true;
                }else if(i==dp.length-1 ){
                    if(p.charAt(j)=='*'){
                        dp[i][j] = dp[i][j+1];
                    }else{
                        dp[i][j] = false;
                    }
                }else if(j == dp[0].length-1){
                    dp[i][j] = false;
                }else{
                    if(s.charAt(i) == p.charAt(j)){
                        dp[i][j] = dp[i+1][j+1];
                    }else if(p.charAt(j) == '?'){
                        dp[i][j] = dp[i+1][j+1];
                    }else if(p.charAt(j) == '*'){
                        dp[i][j] = dp[i+1][j+1]||dp[i][j+1]||dp[i+1][j];
                    }else{
                        dp[i][j] = false;
                    }
                }
            }
        }
        return dp[0][0];
    }
}


////////////////Fractional Knapsack
/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/
class itemCompare implements Comparator<Item>{
    public int compare(Item a, Item b){
        double r1 = (double)a.value/(double)a.weight;
        double r2 = (double)b.value/(double)b.weight;
        
         if(r1<r2){
             return 1;
         }else if(r1>r2){
             return -1;
         }else{
             return 0;
         }
    }
}
class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        // Your code here
        Arrays.sort(arr, new itemCompare());
        
        
        int totalweight = 0;
        double totalres = 0;
        for(Item item : arr){
            int currvl = item.value;
            int currwt = item.weight;
        
            
            if(totalweight+currwt <= W){
                totalres += currvl;
          
                totalweight += currwt;
            }else{
                
                int remainingwt = W-totalweight;
                 totalres += ((double)currvl/(double)currwt)*(double)remainingwt;
                 totalweight +=remainingwt;
                
                 break;
            }
        }
        return totalres;
    }
}