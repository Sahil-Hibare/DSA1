/////////////////516. Longest Palindromic Subsequence

class Solution {
    public int longestPalindromeSubseq(String s) {
        int[][] dp = new int[s.length()][s.length()];
        
        for(int g = 0; g< dp.length;g++){
            for(int i  = 0,j  = g; j<dp[0].length;i++,j++){
                if(g == 0){
                    dp[i][j] = 1;
                }else if(g==1){
                  dp[i][j] =  ( s.charAt(i)==s.charAt(j)) ? 2: 1 ;
                }else{
                    if(s.charAt(i)==s.charAt(j)){
                        dp[i][j] = 2+dp[i+1][j-1];
                    }else{
                        dp[i][j] = Math.max(dp[i][j-1],dp[i+1][j]);
                    }
                }
            }
        }
        return dp[0][s.length()-1];
        
    }
}

//////1143. Longest Common Subsequence
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
      int[][] dp = new int[text1.length()+1][text2.length()+1];
        
        for(int i = dp.length-2;i>=0;i--){
            for(int j = dp[0].length-2;j>=0;j--){
                if(text1.charAt(i)==text2.charAt(j)){
                    dp[i][j]  = 1+ dp[i+1][j+1];
                }else{
                    dp[i][j] = Math.max(dp[i][j+1],dp[i+1][j]);
                }
            }
        }
        return dp[0][0];
    }
}

//////////print lcs
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
      int[][] dp = new int[text1.length()+1][text2.length()+1];
        
        for(int i = dp.length-2;i>=0;i--){
            for(int j = dp[0].length-2;j>=0;j--){
                if(text1.charAt(i)==text2.charAt(j)){
                    dp[i][j]  = 1+ dp[i+1][j+1];
                }else{
                    dp[i][j] = Math.max(dp[i][j+1],dp[i+1][j]);
                }
            }
        }
       
        
        String res = "";
        int i = 0, j = 0;
        while(i<text1.length() && j<text2.length()){
            if(text1.charAt(i)==text2.charAt(j)){
                res = res+text1.charAt(i);
                i++;
                j++;
            }else{
                if(dp[i+1][j]>= dp[i][j+1]){
                    i++;
                }else{
                    j++;
                }
            }
        }
        System.out.println(res);
         return dp[0][0];
        
    }
    
    
}


///////////////Count A+b+c+ Subsequences


public class Main {

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        String str = sc.next();

        int a = 0;
        int ab = 0;
        int abc = 0;
        for(int i=0;i<str.length();i++){
            char ch = str.charAt(i);
            if(ch=='a'){
                a= 2*a+1;
            }else if(ch == 'b'){
                ab = 2*ab+a;
            }else if(ch == 'c'){
                abc = 2*abc+ab;
            }
        }

        System.out.println(abc);

    }
}
