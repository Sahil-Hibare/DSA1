///////////720. Longest Word in Dictionary
class Solution {
    class Node{
        boolean eow = false;
        Node[] children = new Node[26];
    }
    
    String res = "";
    public String longestWord(String[] words) {
        Node root = new Node();
        
      for(String str : words){
          Node temp = root;
          for(char ch: str.toCharArray()){
              if(temp.children[ch-'a']==null){
                  temp.children[ch-'a'] = new Node();
              }
              temp = temp.children[ch-'a'];
          }
          temp.eow = true;
      }
     
      helper(root,new StringBuilder());
        return res;
    }
    
    
    public void helper(Node root, StringBuilder sb){
        if(sb.length()> res.length()){
            res =  sb.toString();
        }
        Node temp  = root;
        for(char ch ='a';ch<='z';ch++){
            Node child = temp.children[ch-'a'];
            if(child != null &&  child.eow == true){
               
                sb.append(ch);
                helper(child, sb);
                sb.deleteCharAt(sb.length()-1);
            }
        }
    }
}


//////648. Replace Words

class Solution {
    
    class Node {
       boolean eow;
       Node[] children = new Node[26];
   }
   
   public String replaceWords(List<String> dictionary, String sentence) {
       Node root = new Node();
       for(String word:dictionary){
            Node temp = root;
           for(char ch:word.toCharArray()){
               if(temp.children[ch-'a'] == null){
                   temp.children[ch-'a'] = new Node();
               }
               temp = temp.children[ch-'a'];
           }
           temp.eow  = true;
       }
       
       
       String[] words = sentence.split(" ");
       for(int i = 0;i < words.length;i++){
           String word = words[i];
           Node temp = root;
           for(int j = 0;j<word.length();j++){
               char ch = word.charAt(j);
                temp = temp.children[ch-'a'];
               if(temp == null){
                   break;
               }else{
                   if(temp.eow == true){
                       words[i] = word.substring(0,j+1);
                       break;
                   }
                  
               }
           }
       }
       return String.join(" ", words);
   }
}

//////////////////////472. Concatenated Words
class Solution {
    class Node{
        boolean eow = false;
        Node[] children =  new Node[26];
    }
    Node root = new Node();
    public List<String> findAllConcatenatedWordsInADict(String[] words) {
        
        
        for(String word : words){
            Node temp = root;
            for(char ch: word.toCharArray()){
                if(temp.children[ch-'a'] == null){
                    temp.children[ch-'a'] = new Node();
                }
                temp = temp.children[ch-'a'];
            }
            temp.eow = true;
        }
        
        
        List<String>  res = new ArrayList<>();
        for(String word : words){
            if(iscomplex(word,0,0)== true){
                res.add(word);
            }
        }
        
        return res;
        
    }
    
    public boolean iscomplex(String word, int idx, int wsf){
        if(idx == word.length()){
            if(wsf>=2){
                return true;
            }
            return false;
        }
        
        Node temp = root;
        for(int i = idx;i<word.length();i++){
            char ch = word.charAt(i);
            
            temp = temp.children[ch-'a'];
            if(temp == null){
                return false;
            }else{
                
                if(temp.eow == true){
                boolean res = iscomplex(word,i+1,wsf+1);
                if(res == true){
                    return true;
                }
                }
            }
        }
        return false;
    }
}



/////////////////212. Word Search II
class Solution {
    class Node{
        boolean eow = false;
        Node[] children = new Node[26];
    }
    Node root = new Node();
    public List<String> findWords(char[][] board, String[] words) {
        
        for(String word :words){
            Node temp = root;
            for(char ch :word.toCharArray()){
                if(temp.children[ch-'a'] == null){
                    temp.children[ch-'a'] = new Node();
                }
                temp = temp.children[ch-'a'];
            }
            temp.eow = true;
        }
        
        boolean[][] vis = new boolean[board.length][board[0].length];
        for(int i = 0;i<board.length;i++){
            for(int j = 0;j<board[0].length;j++){
                helper(board,i,j,vis,root,new StringBuilder());
            }
        }
        return new ArrayList<>(res);
    }
    
    
    HashSet<String> res = new HashSet<>();
    int[][] dirs = {{-1,0},{0,1},{1,0},{-0,-1}};
    public void helper(char[][] board, int i,int j, boolean[][] vis, Node root, StringBuilder wsf){
        
        char ch = board[i][j];
       
        
        Node child = root.children[ch-'a'];
        if(child == null){
            return;
        }
         wsf.append(ch);
        
        if(child.eow == true){
            res.add(wsf.toString());
        }
        
        vis[i][j] = true;
        for(int[] dir :dirs){
            int ii = i+dir[0];
            int jj = j+dir[1];
            
            if(ii>=0 && ii<board.length && jj>=0 && jj<board[0].length && vis[ii][jj] == false){
                helper(board,ii,jj,vis,child,wsf);
            }
        }
        vis[i][j] =false;
        wsf.deleteCharAt(wsf.length()-1);
    }
    
}

//////////////////////79. Word Search
class Solution {
    public boolean exist(char[][] board, String word) {
        
        boolean[][] vis = new boolean[board.length][board[0].length];
        boolean res = false;
        for(int i = 0;i<board.length;i++ ){
            for(int j = 0;j<board[0].length;j++){
               res = helper(board,i,j,word,0,vis);
                if (res == true) return true;
            }
        }
        return res;
    }
    
    int[][] dirs  = {{-1,0},{0,1},{1,0},{0,-1}};
    public boolean helper(char[][] board, int i, int j, String word, int idx, boolean[][] vis){
        
          char ch = board[i][j];
          if(ch != word.charAt(idx)){
            return false;
           }
        if(word.length()-1 == idx){
            return true;
        }
        
     
        boolean res = false;
        vis[i][j] = true;
        for(int[] dir : dirs){
            int ii = i+dir[0];
            int jj = j+dir[1];
            if(ii>=0 && ii<board.length && jj>=0 && jj<board[0].length && vis[ii][jj] == false){
             
               res =  helper(board,ii,jj,word,idx+1,vis);
             
                if(res == true){
                    return res;
                }
            }
        }
        vis[i][j] = false;
       return res; 
    }
}

