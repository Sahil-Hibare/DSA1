///////////////914. X of a Kind in a Deck of Cards
class Solution {
    public boolean hasGroupsSizeX(int[] deck) {
        HashMap<Integer,Integer> map = new HashMap<>();
        for(int card : deck){
            map.put(card, map.getOrDefault(card,0)+1);
        }
        
        int ans = 0;
        for(int key : map.keySet()){
            int count = map.get(key);
            ans = gcd(ans,count);
        }
        return ans >1;
    }
    
    
    public int gcd(int a, int b){
        if(a%b==0){
            return b;
        }else{
            return gcd(b, a%b);
        }
    }
}


/////////////////Check Arithmetic Progression
class Solution
{
    boolean checkIsAP(int arr[] ,int n)
    {
        // code here
        HashSet<Integer> set = new HashSet<>();
        
        int min = Integer.MAX_VALUE;
        int sec = Integer.MAX_VALUE;
        for(int i = 0;i < arr.length;i++){
            
            set.add(arr[i]);
            
             if(arr[i]<min){
                 sec = min;
                 min= arr[i];
             }else if(arr[i]<sec){
                 sec = arr[i];
             }
        }
        
        int diff = sec - min;
         int a = min;
        for(int i=1;i<n;i++){
            int num = a+i*diff;
            if(set.contains(num)== false){
                return false;
            }
        }
        return true;

    
    }
}


////////////////////////Tricky Sorting Cost
class Solution{
    static int sortingCost(int N, int arr[]){
        // code here
        int max = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int val :arr){
            if(map.containsKey(val-1)== true){
               map.put(val,map.get(val-1)+1);
               
            }else{
               map.put(val,1); 
            }
            max = Math.max(max,map.get(val));
        }
        
        return N-max;
    }
}


/////////781. Rabbits in Forest
class Solution {
    public int numRabbits(int[] answers) {
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int ans : answers){
            map.put(ans, map.getOrDefault(ans,0)+1);
        }
        
        int res = 0;
        for(int key : map.keySet()){
            int gs = key+1;
            int count = map.get(key);
            int group = (count+gs-1)/gs;
            res += (group*gs);
                
        }
        return res;
    }
}

////////954. Array of Doubled Pairs
class Solution {
    public boolean canReorderDoubled(int[] arr) {
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for(int num : arr){
            map.put(num, map.getOrDefault(num,0)+1);
        }
        
        for(int key : map.keySet()){
         
            if(map.get(key) == 0){
                continue;
            }
            int reqd = 0;
            if(key<0){
                
                if((key%2) != 0){
                  
                    return false;
                }
                reqd = key/2;
            }else{
                reqd = 2*key;
            }
            
            if(map.getOrDefault(reqd,0)< map.get(key)){
                return false;
            }
            
            map.put(reqd, map.get(reqd)-map.get(key));
            
        }
        return true;
    }
    
}